{"ast":null,"code":"var _jsxFileName = \"/Users/ryanxu/Documents/Coding/the-app/client/src/Pages/Apps/ToDoList/TheToDoList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport * as ApiClient from \"../../../ApiClient\";\nimport HomeButton from \"../../../Components/HomeButton\";\nimport ListContainer from \"./Components/ListContainer\";\nimport \"./ToDoList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TheToDoList = () => {\n  _s();\n\n  const [toCompleteList, setToCompleteList] = useState([]);\n  const [todaysList, setTodaysList] = useState([]);\n  const [completedList, setCompletedList] = useState([]);\n  useEffect(() => {\n    ApiClient.getTasks().then(response => {\n      console.log(response);\n      const data = response.data;\n      const unsortedToCompleteList = [];\n      const unsortedTodaysList = [];\n      const unsortedCompletedList = [];\n\n      for (let i = 0; i < data.length; i++) {\n        switch (data[i].listId) {\n          case 1:\n            unsortedToCompleteList.push(data[i]);\n            break;\n\n          case 2:\n            unsortedTodaysList.push(data[i]);\n            break;\n\n          case 3:\n            unsortedCompletedList.push(data[i]);\n            break;\n\n          default:\n            console.log(\"rip\");\n            break;\n        }\n      }\n\n      setToCompleteList(sortArray(unsortedToCompleteList));\n      setTodaysList(sortArray(unsortedTodaysList));\n      setCompletedList(sortArray(unsortedCompletedList));\n    }).catch(err => console.log(err));\n  }, []);\n\n  const sortArray = data => {\n    const sortedList = data.sort((a, b) => a.indexCol - b.indexCol);\n    return sortedList;\n  };\n\n  const createNewTask = listId => {\n    let indexCol = 0;\n    let existingTasks = [];\n\n    switch (listId) {\n      case 1:\n        indexCol = toCompleteList.length;\n        existingTasks = [...toCompleteList];\n        break;\n\n      case 2:\n        indexCol = todaysList.length;\n        existingTasks = [...todaysList];\n        break;\n\n      case 3:\n        indexCol = completedList.length;\n        existingTasks = [...completedList];\n        break;\n\n      default:\n        console.log(\"rip\");\n        break;\n    }\n\n    ;\n    console.log(\"index: \" + indexCol + \" list: \" + listId);\n    ApiClient.createNewTask(indexCol, listId).then(response => {\n      console.log(response);\n      const newArray = [...existingTasks, {\n        id: response,\n        task: null,\n        description: null,\n        indexCol: indexCol,\n        listId: listId,\n        isOpen: true\n      }];\n\n      switch (listId) {\n        case 1:\n          setToCompleteList(newArray);\n          break;\n\n        case 2:\n          setTodaysList(newArray);\n          break;\n\n        case 3:\n          setCompletedList(newArray);\n          break;\n\n        default:\n          console.log(\"rip\");\n          break;\n      }\n    }).catch(err => console.log(err));\n  };\n\n  const handleUpdate = (id, task, listId) => {\n    const newArray = getList(listId);\n    const index = newArray.findIndex(todo => todo.id === id);\n    newArray[index].task = task;\n    setList(listId, newArray);\n  };\n\n  const handleDelete = (id, index, listId) => {\n    console.log(\"id: \" + id + \" index: \" + index + \" listId: \" + listId);\n    ApiClient.deleteTask(id, index, listId);\n    let newArray = [];\n\n    switch (listId) {\n      case 1:\n        newArray = [...toCompleteList];\n        break;\n\n      case 2:\n        newArray = [...todaysList];\n        break;\n\n      case 3:\n        newArray = [...completedList];\n        break;\n\n      default:\n        console.log(\"rip\");\n        break;\n    }\n\n    newArray = [...newArray.filter(todo => todo.id !== id)];\n    console.log(newArray[0]);\n\n    for (let i = 0; i < newArray.length; i++) {\n      if (newArray[i].indexCol > index) {\n        newArray[i].indexCol--;\n      }\n    }\n\n    setToCompleteList(newArray);\n  };\n\n  const handleShift = (id, direction, listId) => {\n    let newArray = [];\n    console.log(listId);\n\n    switch (listId) {\n      case 1:\n        newArray = [...toCompleteList];\n        break;\n\n      case 2:\n        newArray = [...todaysList];\n        break;\n\n      case 3:\n        newArray = [...completedList];\n        break;\n\n      default:\n        console.log(\"rip\");\n        break;\n    }\n\n    var current = -1;\n\n    for (let i = 0; i < newArray.length; i++) {\n      if (newArray[i].id === id) {\n        current = i;\n      }\n    }\n\n    const temp = newArray[current];\n\n    if (direction === \"moveUp\") {\n      if (current === 0) {\n        console.log(\"first element!\");\n      } else {\n        console.log(newArray);\n        ApiClient.swapTaskIndex(newArray[current].id, newArray[current - 1].id, current, current - 1);\n        newArray[current] = newArray[current - 1];\n        newArray[current - 1] = temp;\n        newArray[current].indexCol--;\n        newArray[current - 1].indexCol++;\n        newArray[current].isOpen = false;\n        newArray[current - 1].isOpen = false;\n      }\n    } else {\n      if (current === newArray.length - 1) {\n        console.log(\"last element!\");\n      } else {\n        ApiClient.swapTaskIndex(newArray[current].id, newArray[current + 1].id, current, current + 1);\n        newArray[current] = newArray[current + 1];\n        newArray[current + 1] = temp;\n        newArray[current].indexCol++;\n        newArray[current + 1].indexCol--;\n        newArray[current].isOpen = false;\n        newArray[current + 1].isOpen = false;\n      }\n    }\n\n    switch (listId) {\n      case 1:\n        setToCompleteList(newArray);\n        break;\n\n      case 2:\n        setTodaysList(newArray);\n        break;\n\n      case 3:\n        setCompletedList(newArray);\n        break;\n\n      default:\n        console.log(\"rip\");\n        break;\n    }\n  };\n\n  const handleSideShift = (id, direction, listId) => {\n    let doShift = true;\n    let list = [];\n\n    switch (listId) {\n      case 1:\n        if (direction === \"moveLeft\") {\n          console.log(\"no such thing as list 0!\");\n          doShift = false;\n          break;\n        }\n\n        list = [...toCompleteList];\n        break;\n\n      case 2:\n        list = [...todaysList];\n        break;\n\n      case 3:\n        if (direction === \"moveRight\") {\n          console.log(\"no such thing as list 4!\");\n          doShift = false;\n          break;\n        }\n\n        list = [...completedList];\n        break;\n\n      default:\n        console.log(\"rip\");\n        break;\n    }\n\n    if (doShift) {\n      let otherListId = listId;\n      direction === \"moveLeft\" ? otherListId-- : otherListId++;\n      const index = list.findIndex(todo => todo.id === id);\n      const todo = list[index];\n      list.splice(index, 1);\n\n      for (let i = index; i < list.length; i++) {\n        list[i].indexCol--;\n      }\n\n      const otherList = getList(otherListId);\n      todo.listId = otherListId;\n\n      if (index > otherList.length - 1) {\n        todo.indexCol = otherList.length;\n        otherList.push(todo);\n      } else {\n        for (let i = index; i < otherList.length; i++) {\n          otherList[i].indexCol++;\n        }\n\n        otherList.splice(index, 0, todo);\n      }\n\n      for (let i = 0; i < list.length; i++) {\n        list[i].isOpen = false;\n      }\n\n      for (let i = 0; i < otherList.length; i++) {\n        otherList[i].isOpen = false;\n      }\n\n      setList(listId, list);\n      setList(otherListId, otherList);\n    }\n  };\n\n  const updateSwitch = (action, id, task, listId) => {\n    console.log(action, id, task, listId);\n\n    switch (action) {\n      case \"add\":\n        createNewTask(listId);\n        break;\n\n      case \"update\":\n        handleUpdate(id, task, listId);\n        break;\n\n      case \"delete\":\n        handleDelete(id, task, listId);\n        break;\n\n      case \"moveUp\":\n        handleShift(id, \"moveUp\", listId);\n        break;\n\n      case \"moveDown\":\n        handleShift(id, \"moveDown\", listId);\n        break;\n\n      case \"moveLeft\":\n        handleSideShift(id, \"moveLeft\", listId);\n        break;\n\n      case \"moveRight\":\n        handleSideShift(id, \"moveRight\", listId);\n        break;\n\n      default:\n        console.log(\"rip\");\n        break;\n    }\n  };\n\n  const getList = listId => {\n    let list = [];\n\n    switch (listId) {\n      case 1:\n        list = [...toCompleteList];\n        break;\n\n      case 2:\n        list = [...todaysList];\n        break;\n\n      case 3:\n        list = [...completedList];\n        break;\n\n      default:\n        console.log(\"rip\");\n        break;\n    }\n\n    return list;\n  };\n\n  const setList = (listId, newArray) => {\n    switch (listId) {\n      case 1:\n        setToCompleteList(newArray);\n        break;\n\n      case 2:\n        setTodaysList(newArray);\n        break;\n\n      case 3:\n        setCompletedList(newArray);\n        break;\n\n      default:\n        console.log(\"rip\");\n        break;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(HomeButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"Title\",\n        style: {\n          padding: 0\n        },\n        children: \"the To-Do List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: e => console.log(toCompleteList),\n      children: \"1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: e => console.log(todaysList),\n      children: \"2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: e => console.log(completedList),\n      children: \"3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"To-Do-Lists\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(ListContainer, {\n          listId: 1,\n          listName: \"TO COMPLETE\",\n          data: toCompleteList,\n          updateState: updateSwitch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(ListContainer, {\n          listId: 2,\n          listName: \"FOR TODAY\",\n          data: todaysList,\n          updateState: updateSwitch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(ListContainer, {\n          listId: 3,\n          listName: \"COMPLETED\",\n          data: completedList,\n          updateState: updateSwitch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 370,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TheToDoList, \"pm9MiahO4+jUzeOEmzbllkT/m98=\");\n\n_c = TheToDoList;\nexport default TheToDoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TheToDoList\");","map":{"version":3,"sources":["/Users/ryanxu/Documents/Coding/the-app/client/src/Pages/Apps/ToDoList/TheToDoList.js"],"names":["React","useEffect","useState","ApiClient","HomeButton","ListContainer","TheToDoList","toCompleteList","setToCompleteList","todaysList","setTodaysList","completedList","setCompletedList","getTasks","then","response","console","log","data","unsortedToCompleteList","unsortedTodaysList","unsortedCompletedList","i","length","listId","push","sortArray","catch","err","sortedList","sort","a","b","indexCol","createNewTask","existingTasks","newArray","id","task","description","isOpen","handleUpdate","getList","index","findIndex","todo","setList","handleDelete","deleteTask","filter","handleShift","direction","current","temp","swapTaskIndex","handleSideShift","doShift","list","otherListId","splice","otherList","updateSwitch","action","padding","e"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport * as ApiClient from \"../../../ApiClient\";\nimport HomeButton from \"../../../Components/HomeButton\";\nimport ListContainer from \"./Components/ListContainer\";\n\nimport \"./ToDoList.css\";\n\nconst TheToDoList = () => {\n\n  const [toCompleteList, setToCompleteList] = useState([]);\n  const [todaysList, setTodaysList] = useState([]);\n  const [completedList, setCompletedList] = useState([]);\n\n  useEffect(() => {\n    ApiClient.getTasks().then((response) => {\n      console.log(response);\n\n      const data = response.data;\n      const unsortedToCompleteList = []\n      const unsortedTodaysList = []\n      const unsortedCompletedList = []\n\n      for (let i = 0; i < data.length; i++) {\n          switch (data[i].listId) {\n            case 1:\n              unsortedToCompleteList.push(data[i]);\n              break;\n            case 2:\n              unsortedTodaysList.push(data[i]);\n              break;\n            case 3: \n              unsortedCompletedList.push(data[i]);\n              break;\n            default: \n              console.log(\"rip\");\n              break;\n          }\n      }\n\n      setToCompleteList(sortArray(unsortedToCompleteList));\n      setTodaysList(sortArray(unsortedTodaysList));\n      setCompletedList(sortArray(unsortedCompletedList));\n    }).catch(err => console.log(err));\n  }, []);\n\n  const sortArray = (data) => {\n      const sortedList = data.sort((a, b) => a.indexCol - b.indexCol);\n      return sortedList;\n  }\n\n  const createNewTask = (listId) => { \n   \n    \n    let indexCol = 0;\n    let existingTasks = []\n\n    switch(listId) {\n      case 1:\n        indexCol = toCompleteList.length;\n        existingTasks = [...toCompleteList];\n        break;\n      case 2:\n        indexCol = todaysList.length;\n        existingTasks = [...todaysList];\n        break;\n      case 3:\n        indexCol = completedList.length;\n        existingTasks = [...completedList];\n        break;\n      default: \n        console.log(\"rip\");\n        break;\n    };\n    console.log(\"index: \" + indexCol + \" list: \" + listId);\n    ApiClient.createNewTask(indexCol, listId).then(\n      (response) => {\n\n      console.log(response);  \n      const newArray = [...existingTasks, {\n        id: response,\n        task: null, \n        description: null, \n        indexCol: indexCol,\n        listId: listId,\n        isOpen: true\n      }];\n      \n      switch(listId) {\n        case 1:\n          setToCompleteList(newArray);\n          break;\n        case 2:\n          setTodaysList(newArray);\n          break;\n        case 3:\n          setCompletedList(newArray);\n          break;\n        default: \n          console.log(\"rip\");\n          break;\n      }\n    }).catch(err => console.log(err));\n    \n  };  \n\n  const handleUpdate = (id, task, listId) => {\n    const newArray = getList(listId);\n    const index = newArray.findIndex(todo => todo.id === id)\n    newArray[index].task = task;\n    setList(listId, newArray);\n  }\n\n  const handleDelete = (id, index, listId) => {\n    console.log(\"id: \" + id + \" index: \" + index + \" listId: \" + listId)\n    ApiClient.deleteTask(id, index, listId);\n\n    let newArray = [];\n    switch(listId) {\n      case 1:\n        newArray = [...toCompleteList];\n        break;\n      case 2:\n        newArray = [...todaysList];\n        break;\n      case 3:\n        newArray = [...completedList];\n        break;\n      default: \n        console.log(\"rip\");\n        break;\n    }\n\n    newArray = [...newArray.filter(todo => todo.id !== id)];\n    console.log(newArray[0]);\n    for (let i = 0; i < newArray.length; i++) {\n      if (newArray[i].indexCol > index) {\n        newArray[i].indexCol--;\n      }\n    }\n    setToCompleteList(newArray);\n  }\n  \n  const handleShift = (id, direction, listId) => {\n\n    let newArray = [];\n    console.log(listId);\n    switch(listId) {\n      case 1:\n        newArray = [...toCompleteList];\n        break;\n      case 2:\n        newArray = [...todaysList];\n        break;\n      case 3:\n        newArray = [...completedList];\n        break;\n      default: \n        console.log(\"rip\");\n        break;\n    }\n\n    var current = -1;\n    for (let i = 0; i < newArray.length; i++) {\n      if (newArray[i].id === id) {\n        current = i;\n      }\n    }\n\n    \n    const temp = newArray[current];\n    \n    if (direction === \"moveUp\") {\n      if (current === 0) {\n        console.log(\"first element!\")\n      }\n      else {\n        console.log(newArray)\n        ApiClient.swapTaskIndex(newArray[current].id, newArray[current - 1].id, current, current - 1);\n        newArray[current] = newArray[current - 1];\n        newArray[current - 1] = temp;\n        newArray[current].indexCol--;\n        newArray[current - 1].indexCol++;\n        newArray[current].isOpen = false;\n        newArray[current - 1].isOpen = false;\n      }   \n    }\n\n    else {\n      if (current === newArray.length - 1) {\n        console.log(\"last element!\")\n      }\n      else {\n        ApiClient.swapTaskIndex(newArray[current].id, newArray[current + 1].id, current, current + 1);\n        newArray[current] = newArray[current + 1];\n        newArray[current + 1] = temp; \n        newArray[current].indexCol++;\n        newArray[current + 1].indexCol--;\n        newArray[current].isOpen = false;\n        newArray[current + 1].isOpen = false;\n      }\n    }\n\n    switch(listId) {\n      case 1:\n        setToCompleteList(newArray);\n        break;\n      case 2:\n        setTodaysList(newArray);\n        break;\n      case 3:\n        setCompletedList(newArray);\n        break;\n      default: \n        console.log(\"rip\");\n        break;\n    }\n  }\n\n  const handleSideShift = (id, direction, listId) => {\n\n    let doShift = true;\n    let list = [];\n\n    switch(listId) {\n      case 1:\n        if (direction === \"moveLeft\") {\n          console.log(\"no such thing as list 0!\");\n          doShift = false;\n          break;\n        }\n        list = [...toCompleteList];\n        break;\n\n      case 2:\n        list = [...todaysList];\n        break;\n\n      case 3:\n        if (direction === \"moveRight\") {\n          console.log(\"no such thing as list 4!\");\n          doShift = false;\n          break;\n        }\n        list = [...completedList];\n        break;\n\n      default: \n        console.log(\"rip\");\n        break;\n    }\n\n    if (doShift) {\n      let otherListId = listId;\n \n      direction === \"moveLeft\" ? otherListId-- : otherListId++;\n\n      const index = list.findIndex(todo => todo.id === id);\n      const todo = list[index];\n      list.splice(index, 1);\n      for (let i = index; i < list.length; i++) { \n        list[i].indexCol--;\n      }\n\n\n      const otherList = getList(otherListId);\n      todo.listId = otherListId;\n\n      if (index > otherList.length - 1) {\n        todo.indexCol = otherList.length;\n        otherList.push(todo);\n      }\n      else {\n        for (let i = index; i < otherList.length; i++) {\n          otherList[i].indexCol++;\n        }\n        otherList.splice(index, 0, todo);\n      }\n      \n      for (let i = 0; i < list.length; i++) {\n        list[i].isOpen = false;\n      }\n      for (let i = 0; i < otherList.length; i++) {\n        otherList[i].isOpen = false;\n      }\n      \n\n      setList(listId, list);\n      setList(otherListId, otherList);\n    }\n  }\n\n  const updateSwitch = (action, id, task, listId) => {\n    console.log(action, id, task, listId)\n    switch(action) {\n      \n      case \"add\":\n        createNewTask(listId);\n        break;\n\n      case \"update\":\n        handleUpdate(id, task, listId);\n        break;\n\n      case \"delete\":\n        handleDelete(id, task, listId);\n        break;\n\n      case \"moveUp\":\n        handleShift(id, \"moveUp\", listId);\n        break;\n\n      case \"moveDown\":\n        handleShift(id, \"moveDown\", listId);\n        break;\n      \n      case \"moveLeft\":\n        handleSideShift(id, \"moveLeft\", listId);\n        break;\n\n      case \"moveRight\":\n        handleSideShift(id, \"moveRight\", listId);\n        break;\n\n      default: \n        console.log(\"rip\");\n        break;\n    }\n  }\n\n  const getList = (listId) => {\n    let list = []\n    switch(listId) {\n      case 1:\n        list = [...toCompleteList];\n        break;\n      case 2:\n        list = [...todaysList];\n        break;\n      case 3:\n        list = [...completedList];\n        break;\n      default: \n        console.log(\"rip\");\n        break;\n    }\n\n    return list;\n  }\n\n  const setList = (listId, newArray) => {\n    switch(listId) {\n      case 1:\n        setToCompleteList(newArray);\n        break;\n      case 2:\n        setTodaysList(newArray);\n        break;\n      case 3:\n        setCompletedList(newArray);\n        break;\n      default: \n        console.log(\"rip\");\n        break;\n    }\n  }\n \n\n  return (\n    <div>\n      <HomeButton />\n      <div className=\"Header\">\n        <h1 className=\"Title\" style={{padding: 0}}>the To-Do List</h1>\n      </div>\n\n      <button onClick={(e) => console.log(toCompleteList)}>1</button>\n      <button onClick={(e) => console.log(todaysList)}>2</button>\n      <button onClick={(e) => console.log(completedList)}>3</button>\n\n      <div className=\"To-Do-Lists\">\n        <div>\n          <ListContainer \n            listId={1}\n            listName={\"TO COMPLETE\"}\n            data={toCompleteList}\n            updateState={updateSwitch}\n          />\n        </div>\n        <div>\n        <ListContainer \n            listId={2}\n            listName={\"FOR TODAY\"}\n            data={todaysList}\n            updateState={updateSwitch}\n          />\n        </div>\n        <div>\n        <ListContainer \n            listId={3}\n            listName={\"COMPLETED\"}\n            data={completedList}\n            updateState={updateSwitch}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default TheToDoList;"]},"metadata":{},"sourceType":"module"}